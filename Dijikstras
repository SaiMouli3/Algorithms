# dijikstras
def dijk(graph, source):
    n = len(graph)
    dist = [float('inf')] * n
    visited = [False] * n
    dist[source] = 0
    for _ in range(n - 1):
        min_v = -1
        min_d = float('inf')
        for v in range(n):
            if not visited[v] and dist[v] < min_d:
                min_v = v
                min_d = dist[v]
        visited[min_v] = True
        for neigh, weigh in graph[min_v]:
            if not visited[neigh] and dist[min_v] + weigh < dist[neigh]:
                dist[neigh] = dist[min_v] + weigh
    return dist


graph = [
    [(1, 10), (4, 100)],  # Node 1
    [(2, 50), (0, 10)],  # Node 2
    [(1, 50), (4, 10), (3, 20)],  # Node 3
    [(2, 20), (4, 60)],  # Node 4
    [(0, 100), (2, 10), (3, 60)]
]
shortest_distances = dijk(graph, 0)
print("Shortest distances from the source to all other locations:")
for i, distance in enumerate(shortest_distances):
    print(f"Location {i}: {distance}")
